#!/usr/bin/env bash

BUILD_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
VERSION=3

function load_common() {
  gitflow_path="$(which -a git-flow | grep -v "^$BUILD_DIR/git-flow\$" | head -n1)"
  while [ -h "$gitflow_path" ]; do
    # shellcheck disable=SC2155
    local link=$(readlink "$gitflow_path")
    if expr "$link" : '/.*' > /dev/null; then
      gitflow_path="$link"
    else
      gitflow_path="$(dirname "$gitflow_path")/$link"
    fi
  done
  # shellcheck disable=SC2155
  gitflow_dir=$(dirname "$gitflow_path")/../libexec/bin
  # shellcheck disable=SC1090
  . "$gitflow_dir/gitflow-common"
}

function get_gitflow_extension_current_version() {
  echo "$(git config --get gitflow.extension.version || echo '0')"
}

function is_gitflow_extension_initialized() {
  local gitflow_extension_version
  gitflow_extension_version=$(get_gitflow_extension_current_version)
  if [[ "$gitflow_extension_version" -eq "0" ]]; then
    return 1
  else
    return 0
  fi
}

function is_gitflow_extension_current() {
  local gitflow_extension_version
  gitflow_extension_version=$(get_gitflow_extension_current_version)
  if [[ "$gitflow_extension_version" -eq "$VERSION" ]]; then
    return 0
  else
    return 1
  fi
}

function write_pre_flow_hotfix_start_hook() {
  cat << EOF > $HOME/.git-hooks/pre-flow-hotfix-start
#!/usr/bin/env bash

function load_common() {
  gitflow_path="\$(which -a git-flow | grep -v "^$BUILD_DIR/git-flow\$" | grep -v "^/Applications/" | head -n1)"
  while [ -h "\$gitflow_path" ]; do
    # shellcheck disable=SC2155
    local link=\$(readlink "\$gitflow_path")
    if expr "\$link" : '/.*' > /dev/null; then
      gitflow_path="\$link"
    else
      gitflow_path="\$(dirname "\$gitflow_path")/\$link"
    fi
  done
  # shellcheck disable=SC2155
  gitflow_common_file=\$(dirname "\$gitflow_path")/../libexec/bin/gitflow-common
  . "\$gitflow_common_file"
  if [[ "\$?" -ne 0 ]]; then
    echo -e "Failed to source '\$gitflow_common_file': \$?" 1>&2
    exit 1
  fi
}

function run() {
  local version="\$1"
  local origin="\$2"
  local branch="\$3"
  local base="\$4"
  local pattern='^hotfix/(([[:alpha:]]+-[[:digit:]]+)|([[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}))(\.[[:digit:]]+)?\$'

  load_common

  if [[ ! \$branch =~ \$pattern ]]; then
    die "invalid hotfix branch name '\$branch', must be similar to hotfix/TOP-1234, hotfix/MU-1234.1, hotfix/2019-07-11, or hotfix/2019-07-11.1"
  fi
}

run "\$@"

EOF
  chmod +x $HOME/.git-hooks/pre-flow-hotfix-start
}

function write_pre_flow_hotfix_finish_hook() {
  cat << EOF > $HOME/.git-hooks/pre-flow-hotfix-finish
#!/usr/bin/env bash

function run() {
  local name="\$1"
  local origin="\$2"
  local branch="\$3"

  $HOME/.git-hooks/pre-flow-finish "hotfix" "\$MASTER_BRANCH" "\$name" "\$origin" "\$branch"
}

run "\$@"

EOF
  chmod +x $HOME/.git-hooks/pre-flow-hotfix-finish
}

function write_post_flow_hotfix_finish_hook() {
  cat << EOF > $HOME/.git-hooks/post-flow-hotfix-finish
#!/usr/bin/env bash

function run() {
  local name="\$1"
  local origin="\$2"
  local branch="\$3"

  $HOME/.git-hooks/post-flow-finish "hotfix" "\$MASTER_BRANCH" "\$name" "\$origin" "\$branch"
}

run "\$@"

EOF
  chmod +x $HOME/.git-hooks/post-flow-hotfix-finish
}

function write_pre_flow_feature_finish_hook() {
  cat << EOF > $HOME/.git-hooks/pre-flow-feature-finish
#!/usr/bin/env bash

function run() {
  local name="\$1"
  local origin="\$2"
  local branch="\$3"

  $HOME/.git-hooks/pre-flow-finish "feature" "\$DEVELOP_BRANCH" "\$name" "\$origin" "\$branch"
}

run "\$@"

EOF
  chmod +x $HOME/.git-hooks/pre-flow-feature-finish
}

function write_post_flow_feature_finish_hook() {
  cat << EOF > $HOME/.git-hooks/post-flow-feature-finish
#!/usr/bin/env bash

function run() {
  local name="\$1"
  local origin="\$2"
  local branch="\$3"

  $HOME/.git-hooks/post-flow-finish "feature" "\$DEVELOP_BRANCH" "\$name" "\$origin" "\$branch"
}

run "\$@"

EOF
  chmod +x $HOME/.git-hooks/post-flow-feature-finish
}

function write_pre_flow_finish_hook() {
  cat << EOF > $HOME/.git-hooks/pre-flow-finish
#!/usr/bin/env bash

function load_common() {
  gitflow_path="\$(which -a git-flow | grep -v "^$BUILD_DIR/git-flow\$" | grep -v "^/Applications/" | head -n1)"
  while [ -h "\$gitflow_path" ]; do
    # shellcheck disable=SC2155
    local link=\$(readlink "\$gitflow_path")
    if expr "\$link" : '/.*' > /dev/null; then
      gitflow_path="\$link"
    else
      gitflow_path="\$(dirname "\$gitflow_path")/\$link"
    fi
  done
  # shellcheck disable=SC2155
  gitflow_common_file=\$(dirname "\$gitflow_path")/../libexec/bin/gitflow-common
  . "\$gitflow_common_file"
  if [[ "\$?" -ne 0 ]]; then
    echo -e "Failed to source '\$gitflow_common_file': \$?" 1>&2
    exit 1
  fi
}

function run() {
  local type="\$1"
  local default_base_branch="\$2"
  local name="\$3"
  local origin="\$4"
  local branch="\$5"

  load_common

  local base_branch
  base_branch="\$(gitflow_config_get_base_branch \$branch)" || die "failed to get base branch"
  base_branch=\${base_branch:-\$default_base_branch}

  if ! git_is_branch_merged_into "\$branch" "\$base_branch"; then
  local git_commit_author_name
  git_commit_author_name="\$(git config --get user.name)" || die "failed to find git config: user.name"
  local git_commit_author_email
  git_commit_author_email="\$(git config --get user.email)" || die "failed to find git config: user.email"
  local git_commit_author="\$git_commit_author_name <\$git_commit_author_email>"
  local git_squash_commit_format
  git_squash_commit_format="\$(git config --get gitflow.\$type.finish.squash.format)"
  if [[ "\$?" != "0" ]]; then
    git_squash_commit_format="%h%x09%ad%x09<%aE>%x09%s"
  fi
  local git_commit_details
  git_commit_details="\$(git log "\$base_branch..\$branch" --date="format:%Y-%m-%d %H:%M" --pretty="format:\$git_squash_commit_format" | sed 's/^/* /')" || die "failed to get commit details"
  local git_commit_count
  git_commit_count="\$(echo "\$git_commit_details" | grep -c '^')" || die "failed to determine commit count"
  if [[ "\$git_commit_count" -gt "1" ]]; then
    git config --local "gitflow.branch.\$branch.squashed" "true" || die "failed to store squashed flag"
    local git_merge_base
    git_merge_base="\$(git merge-base HEAD \$base_branch)" || die "failed to find merge base"
    git reset --soft \$git_merge_base || die "failed to reset back to merge base"
    local git_commit_message_file
    git_commit_message_file="\$(mktemp)" || die "failed to create temp file for git commit message"
    cat <<EOM > \$git_commit_message_file
Finish \$branch

\${git_commit_details}
EOM
    trap "rm -rf \$git_commit_message_file" EXIT
    git commit --author="\$git_commit_author" --edit --file \$git_commit_message_file
    if [[ "\$?" != "0" ]]; then
      git reset 'HEAD@{1}' || die "failed to undo reset"
      die "failed to squash commits"
    fi
  fi

  git fetch -q "\$origin" "\$base_branch" || die "failed to fetch"
  git_compare_refs "\$base_branch" "\$origin/\$base_branch"
  local compare_refs_result=\$?
  if [ \$compare_refs_result -gt 0 ]; then
    warn "Branches '\$base_branch' and '\$origin/\$base_branch' have diverged."
    if [[ "\$git_commit_count" -gt "1" ]]; then
      git reset 'HEAD@{2}' || die "failed to undo reset and commit"
    fi
    warn "And the branches need manual merging."
    warn "When finished, re-run:"
    warn "    git flow feature finish '\$name' '\$base_branch'"
    exit 1
  fi

  git rebase \$base_branch || die "failed to rebase onto base branch"
  fi
  if git_remote_branch_exists "\$origin/\$branch"; then
    git push --force || die "failed to push squashed branch"
  fi
  exit 0
}

run "\$@"
EOF
  chmod +x $HOME/.git-hooks/pre-flow-finish
}

function write_post_flow_finish_hook() {
  cat << EOF > $HOME/.git-hooks/post-flow-finish
#!/usr/bin/env bash

function load_common() {
  gitflow_path="\$(which -a git-flow | grep -v "^$BUILD_DIR/git-flow\$" | grep -v "^/Applications/" | head -n1)"
  while [ -h "\$gitflow_path" ]; do
    # shellcheck disable=SC2155
    local link=\$(readlink "\$gitflow_path")
    if expr "\$link" : '/.*' > /dev/null; then
      gitflow_path="\$link"
    else
      gitflow_path="\$(dirname "\$gitflow_path")/\$link"
    fi
  done
  # shellcheck disable=SC2155
  gitflow_common_file=\$(dirname "\$gitflow_path")/../libexec/bin/gitflow-common
  . "\$gitflow_common_file"
  if [[ "\$?" -ne 0 ]]; then
    echo -e "Failed to source '\$gitflow_common_file': \$?" 1>&2
    exit 1
  fi
}

function run() {
  local type="\$1"
  local default_base_branch="\$2"
  local name="\$3"
  local origin="\$4"
  local branch="\$5"

  load_common

  local squashed=false
  if git config --local --get "gitflow.branch.\$branch.squashed"; then
    squashed=true
    git config --local --unset "gitflow.branch.\$branch.squashed" 2>/dev/null
  fi

  local base_branch
  base_branch="\$(gitflow_config_get_base_branch \$branch)" || die "failed to get base branch"
  base_branch=\${base_branch:-\$default_base_branch}

  git fetch -q "\$origin" "\$base_branch" || die "failed to fetch"

  local local_commit remote_commit
  local_commit=\$(git rev-parse "\$base_branch"@{1}) || die "failed to find git revision for: \${base_branch}@{1}"
  remote_commit=\$(git rev-parse "\$origin/\$base_branch"^{}) || die "failed to find git revision for: \$origin/\${base_branch}^{}"
  if [ "\$local_commit" != "\$remote_commit" ]; then
    warn "Branches '\$base_branch' and '\$origin/\$base_branch' have diverged."
    if [[ "\$squashed" == "true" ]]; then
      git reset --hard 'HEAD@{3}' || die "failed to undo merge"
    else
      git reset --hard 'HEAD@{1}' || die "failed to undo merge"
    fi
    warn "Branch '\$branch' needs to be updated with the latest changes '\$base_branch'"
    warn "Perform the following steps:"
    warn "    git pull '\$origin' '\$base_branch'"
    warn "    git checkout '\$branch'"
    warn "    git rebase '\$base_branch'"
    warn "    # resolve conflicts"
    warn "    git push --force '\$origin' '\$branch'"
    warn "When finished, re-run:"
    warn "    git flow feature finish '\$name' '\$base_branch'"
    exit 1
  fi

  exit 0
}

run "\$@"
EOF
  chmod +x $HOME/.git-hooks/post-flow-finish
}

function write_hooks() {
  mkdir -p $HOME/.git-hooks
  write_pre_flow_finish_hook
  write_post_flow_finish_hook
  write_pre_flow_hotfix_start_hook
  write_pre_flow_hotfix_finish_hook
  write_post_flow_hotfix_finish_hook
  write_pre_flow_feature_finish_hook
  write_post_flow_feature_finish_hook
}

function initialize() {
  write_hooks
  if ! git rev-parse --git-dir >/dev/null 2>&1; then
    git init >/dev/null 2>&1
  fi
  if ! git_local_branch_exists "master" >/dev/null 2>&1; then
    if ! git rev-parse --quiet --verify HEAD >/dev/null 2>&1; then
      git symbolic-ref HEAD "refs/heads/master" >/dev/null 2>&1
      git commit --allow-empty --quiet -m "Initial commit" >/dev/null 2>&1
    elif git_remote_branch_exists "master" >/dev/null 2>&1; then
      git branch "master" "origin/master" >/dev/null 2>&1
    fi
  fi
  if ! git_local_branch_exists "develop" >/dev/null 2>&1; then
    if git_remote_branch_exists "develop" >/dev/null 2>&1; then
      git branch "develop" "origin/develop" >/dev/null 2>&1
    else
      git branch --no-track "develop" "master"
    fi
  fi
  git config gitflow.branch.develop "develop"
  git config gitflow.branch.master "master"
  git config gitflow.prefix.feature "feature/"
  git config gitflow.prefix.release "release/"
  git config gitflow.prefix.hotfix "hotfix/"
  git config gitflow.prefix.support "support/"
  git config gitflow.prefix.versiontag ""
  git config gitflow.feature.finish.fetch true
  git config gitflow.feature.finish.no-ff true
  git config gitflow.feature.finish.rebase false
  git config gitflow.feature.finish.push true
  git config gitflow.feature.finish.squash false
  git config gitflow.hotfix.finish.message "Tagged"
  git config gitflow.hotfix.finish.fetch true
  git config gitflow.hotfix.finish.push true
  git config gitflow.hotfix.finish.squash false
  git config gitflow.release.finish.message "Tagged"
  git config gitflow.release.finish.fetch true
  git config gitflow.release.finish.push true
  git config gitflow.release.finish.squash false
  git config gitflow.path.hooks "$HOME/.git-hooks"
  git config gitflow.extension.version "$VERSION"
}

run_post_hook() {
  set -x
  local scriptfile

  scriptfile="${HOOKS_DIR}/post-flow-${SUBCOMMAND}-${SUBACTION}"
  exitcode=0
  if [ -x "$scriptfile" ]; then
    "$scriptfile" "$@"
    exitcode=$?

    if [ $exitcode -gt 0 ]; then
      die "Hook command $scriptfile ended with exit code $exitcode."
    fi
  fi
}

function run() {
  local gitflow_path gitflow_dir
  load_common
  if [[ "$#" -ge "1" ]]; then
    local subcommand="$1"
    if [[ "$subcommand" == "version" ]]; then
      local gitflow_version
      gitflow_version="$($gitflow_path version)"
      local gitflow_extension_version
      gitflow_extension_version="$(git config --get gitflow.extension.version)"
      if [[ "$?" == "0" ]]; then
        gitflow_version="$gitflow_version ext $gitflow_extension_version"
      fi
      echo "$gitflow_version"
      local gitflow_init_message="Initialized: "
      if ! is_gitflow_extension_initialized; then
        gitflow_init_message="${gitflow_init_message}No"
      elif is_gitflow_extension_current; then
        gitflow_init_message="${gitflow_init_message}Yes"
      else
        gitflow_init_message="${gitflow_init_message}Outdated"
      fi
      echo "$gitflow_init_message"
    elif [[ "$subcommand" == "init" ]]; then
      if [[ "$#" -ge "2" ]]; then
        local arg1="$2"
        if [[ "$arg1" == "help" ]]; then
          $gitflow_path init help
          exit 0
        fi
      fi
      for var in "${@}"; do
        case "$var" in
          -h | --help)
          cat << EOF
usage: git flow init [-h]

    Setup a git repository for git flow usage. Can also be used to start a git repository.

    -h, --help            Show this help
EOF
          exit 0
          ;;
        esac
      done
      initialize
    else
      # shellcheck disable=SC2155
      local gitflow_extension_version="$(git config --get gitflow.extension.version || echo '0')"
      if ! is_gitflow_extension_initialized; then
        die "GitFlow for git repository is not initialized.  Run: git flow init"
      elif ! is_gitflow_extension_current; then
        die "GitFlow for git repository is initialized to version $gitflow_extension_version, but needs to be upgraded to version $VERSION.  Run: git flow init"
      fi
      $gitflow_path "$@"
    fi
  else
    $gitflow_path "$@"
  fi
}

run "$@"
